#!/usr/bin/env ruby
# encoding: UTF-8

require 'rubygems'
require 'net/http'
require 'uri'
require 'json'
require 'date'
require 'ostruct'

module Weather
  class Condition < OpenStruct
    SYMBOLS = {
      death: '⚠',
      cloudy: '☁',
      sunny: '☀',
      rainy: '☂',
      snowy: '☃',
      unknown: '?',
      degrees: '°'
    }

    def range
      return nil unless @high && @low
      (@low..@high)
    end

    # see: http://developer.yahoo.com/weather/#codes
    def formatted_symbol
      case code.to_i
      when 0, 1, 2
        SYMBOLS[:death]
      when 5, 6, 7, 13, 14, 15, 16, 17, 18, 41, 42, 43, 46
        SYMBOLS[:snowy]
      when 3, 4, 8, 11, 12, 35, 37, 38, 39, 40, 45, 47
        SYMBOLS[:rainy]
      when 32, 33, 34, 36
        SYMBOLS[:sunny]
      when 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 44
        SYMBOLS[:cloudy]
      else
        SYMBOLS[:unknown]
      end
    end

    def formatted_temp
      if temp.nil?
        "#{format_temp low} - #{format_temp high}"
      else
        format_temp temp
      end
    end

    def to_s
      '%{symbol}  %{temp}' % {symbol: formatted_symbol, temp: formatted_temp}
    end

    private

    def format_temp(temp)
      "#{temp}#{SYMBOLS[:degrees]}"
    end
  end

  extend self

  RC_FILE = File.join(ENV['HOME'], '.weatherrc')
  ENDPOINT = %(http://query.yahooapis.com/v1/public/yql)
  QUERY = %(select item from weather.forecast where location="%{location}")

  def show_usage
    puts DATA.read
    exit 1
  end

  def forecast(location = nil)
    location ||= last_used_location

    params = {
      q: build_location_query(location),
      format: 'json'
    }

    response = request ENDPOINT, params
    case response.code
    when "200"
      json = JSON.parse response.body
      forecast = json['query']['results']['channel']['item']
      set_last_location location
      display_forecast forecast
    else
      puts "Bad response: #{response.code}"
    end
  end

  private

  def request(url, params = {})
    uri = URI.parse url
    query = build_params(params)
    endpoint = URI.join(uri, "?#{query}")
    Net::HTTP.get_response(endpoint)
  end

  def set_last_location(where)
    File.open(RC_FILE, 'w+'){ |f| f << where }
  end

  def last_used_location
    show_usage unless File.exist?(RC_FILE)
    File.open(RC_FILE).read
  end

  def display_forecast(forecast)
    current = Condition.new(forecast['condition'])
    puts forecast['title']
    puts forecast['link']

    puts "\nCurrently:  #{current}"

    Array(forecast['forecast']).each do |data|
      condition = Condition.new(data)
      date = Date.parse(condition.date).strftime('%m/%d/%Y')
      puts "#{date}: #{condition}"
    end
    puts
  end

  def build_params(params)
    params.map{ |k, v| %(#{k}=#{v}) }.join '&'
  end

  def build_location_query(location)
    query = QUERY % {location: location}
    URI.encode(query, '=" ')
    # ?q=&format=json
  end
end

if ARGV.delete('-h') || ARGV.delete('--help')
  Weather.show_usage
else
  Weather.forecast ARGV[0]
end
