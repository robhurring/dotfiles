exit if RUBY_ENGINE == 'macruby'

require 'rubygems'
require 'irb/completion'
require 'irb/ext/save-history'
require 'pp'

# Bootstrap some global gempaths from RVM and include some helpers if available
module IRB::Bootstrap
  module_function

  def included(_base)
    setup!
  end

  def gempath
    (ENV['_ORIGINAL_GEM_PATH'] || ENV['GEM_PATH'] || `gem env path`.chop)
      .split(':')
      .grep(/ruby.*@global/)
      .first
  rescue
    nil
  end

  def try_require(*names)
    names.each do |name|
      begin
        require name.to_s
      rescue LoadError
        warn "[loaderror]: #{name}"
      end
    end
  end

  def setup!
    irb_gemset = gempath
    return unless irb_gemset

    Dir["#{irb_gemset}/gems/*"].each do |path|
      $LOAD_PATH << "#{path}/lib"
    end
  end
end

module IRB::GemHelpers
  module_function

  GEMS = [
    'awesome_print',
    'interactive_editor'
  ]

  def included(_base)
    setup!
  end

  def setup!
    try_require *GEMS
    after_setup
  end

  def after_setup
    if defined?(::Rails)
      Rails.application.config.cache_classes = false
    end
  end
end

module IRB::Rails
  def sql(query)
    ActiveRecord::Base.connection.select_all(query)
  end

  def silence(&block)
    hide_log
    block.call
  ensure
    show_log
  end

  def change_log(stream)
    ActiveRecord::Base.logger = Logger.new(stream)
    ActiveRecord::Base.clear_active_connections!
  end

  def show_log
    change_log(STDOUT)
  end

  def hide_log
    change_log(nil)
  end
end


IRB.conf.merge!({
  :USE_READLINE => true,
  :SAVE_HISTORY => 100,
  :HISTORY_FILE => "#{ENV['HOME']}/.irb_history",
  :AUTO_INDENT => true,
  :PROMPT_MODE => :SIMPLE
})

# ---> Bootstrap

include IRB::Bootstrap
include IRB::GemHelpers
include IRB::Rails if defined?(::Rails)

# global Object helpers
class Object
  def ivg name
    instance_variable_get name
  end

  def ivs name, value
    instance_variable_set name, value
  end

  def copy
    IO.popen('pbcopy', 'w'){ |f| f << self.to_s }
    self
  end
end

# write all output from block to file
def save(filename = '/Desktop/irb-session.txt', &block)
  path = File.join ENV['HOME'], filename
  File.open(path, 'w+') do |f|
    f << block.call
  end
end

def benchmark
  require 'benchmark'
  bm = Benchmark.realtime{ yield }
  puts "%0.2f Second(s)" % bm
end
alias bm benchmark

def paste
  `pbpaste`.chomp
end

if defined?(::RSpecConsole) && !defined?(rspec)
  def rspec(file = '.', opts = '--format=doc')
    RSpecConsole.run(file, opts)
  end

  def cucumber(file = '.', opts = '--format=pretty')
    CucumberConsole.run(opts, file)
  end
end

# ---> Machine specific helpers
localrc = File.expand_path('.localirbrc', ENV['HOME'])
if File.exists?(localrc)
  load localrc.to_s
end

lkirbrc = File.expand_path('.irbrc', ENV['LKHOME'])
if File.exists?(lkirbrc)
  load lkirbrc.to_s
end
