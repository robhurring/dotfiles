let mapleader=" "

" options
set clipboard+=unnamed
set hlsearch
set ignorecase
set incsearch
set mps+=<:>
set number
" set relativenumber
set scrolloff=3
set showmode
set sidescroll=1
set sidescrolloff=3
set smartcase
set surround
set undolevels=100
set viminfo='100,/100,h,\"500,:100
set wrapscan

" repeating
vnoremap . :normal .<CR>
vnoremap @ :normal! @

" esc
inoremap jk <Esc>`^

" splits
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
nnoremap <C-h> <C-w>h

vnoremap < <gv
vnoremap > >gv

" closing
nnoremap <C-q> :action CloseContent<CR>

" copy/paste
noremap Y y$

" misc
"nnoremap J mzJ`z
nnoremap J :action EditorJoinLines<CR>
nnoremap ,, :b#<CR>
nnoremap U :action $Redo<CR>
nnoremap * *``
nnoremap <leader>xs :source ~/.ideavimrc<CR>

" search
nnoremap <leader>/ :noh<CR>
nnoremap g/ :action Find<CR>
" nnoremap n :action FindNext<CR>
" nnoremap N :action FindPrevious<CR>
" nnoremap ; :action AceJumpAction<CR>

" formatting
nnoremap <leader>= :action ReformatCode<CR>
nnoremap <leader>c :action CodeCleanup<CR>
nnoremap <leader>i :action CodeInspection.OnEditor<CR>

" file navigation
nnoremap <C-Space> :action SearchEverywhere<CR>
nnoremap <leader>o :action GotoClass<CR>
nnoremap <leader>j :action RecentFiles<CR>
nnoremap <leader>gt :action GotoTest<CR>

" editing / info
nnoremap <Tab> :action ShowIntentionActions<CR>
nnoremap <C-]> :action GotoImplementation<cr>
nnoremap <C-[> :action GotoSuperMethod<cr>
nnoremap <C-i> :action QuickImplementations<cr>
nnoremap <C-S-]> :action FindUsages<CR>
nnoremap <leader>k :action FileStructurePopup<CR>
nnoremap <leader>u :action HighlightUsagesInFile<cr>
nnoremap R :action Refactorings.QuickListPopupAction<CR>

" run / build / test
nnoremap <leader>r :action ChooseRunConfiguration<CR>
nnoremap ,r :action RunClass<CR>
nnoremap ,d :action DebugClass<CR>
nnoremap ,R :action Run<CR>
nnoremap ,D :action Debug<CR>
nnoremap ,c :action CheckStyleCurrentFileAction<CR>

noremap <C-Down> :action MoveStatementDown<CR>
noremap <C-Up> :action MoveStatementUp<CR>
nnoremap <C-/> :action CommentByLineComment<CR>
noremap <C-Right> :action NextTab<CR>
noremap <C-Left> :action PreviousTab<CR>

" unimpaired mappings
nnoremap [<space> O<esc>j
nnoremap ]<space> o<esc>k
nnoremap [q :action PreviousOccurence<cr>
nnoremap ]q :action NextOccurence<cr>
nnoremap [m :action MethodUp<cr>
nnoremap ]m :action MethodDown<cr>
nnoremap ]c :action VcsShowNextChangeMarker<cr>
nnoremap [c :action VcsShowPrevChangeMarker<cr>
nnoremap ]q :action GotoNextError<CR>
nnoremap [q :action GotoPreviousError<CR>

" toggles
nnoremap coh :action HideAllWindows<CR>
nnoremap cow :action EditorToggleUseSoftWraps<CR>
nnoremap col :action EditorToggleShowWhitespaces<CR>
nnoremap cor :set relativenumber!<CR>
nnoremap con :set number!<CR>
nnoremap ,s :action ChangeColorScheme<CR>

" common panes
nnoremap <leader>as :action ActivateStructureToolWindow<CR>
noremap <leader>af :action ActivateProjectToolWindow<CR>

" inoremap <C-X>= :normal action InsertRubyInjection<CR>
" inoremap <C-X>= #{}<Esc>i
inoremap <C-X>= ${}<Esc>i

