let mapleader=" "

" options
set clipboard+=unnamed
set hlsearch
set ignorecase
set incsearch
set mps+=<:>
set number
" set relativenumber
set scrolloff=3
set showmode
set sidescroll=1
set sidescrolloff=3
set smartcase
set undolevels=100
set viminfo='10,/10,h,\"10,:10
set wrapscan

" emulated support
" https://github.com/JetBrains/ideavim/wiki/Emulated-plugins
set surround
set exchange
set commentary
set ReplaceWithRegister

set vim-paragraph-motion
set textobj-indent
set matchit

set multiple-cursors
" change keybinds for multiple-cursors
" NOTE: need to change keyboard to unicode hex input!
" SEE: https://stackoverflow.com/a/65430514
" g<M-n|p|x> - next, prev, skip
"nnomap <M-n> <Plug>NextWholeOccurrence
"xnomap <M-n> <Plug>NextWholeOccurrence
"nnomap g<C-n> <Plug>NextOccurrence
"xnomap g<C-n> <Plug>NextOccurrence
"nnomap <C-x> <Plug>SkipOccurrence
"xnomap <C-x> <Plug>SkipOccurrence
"nnomap <C-p> <Plug>RemoveOccurrence
"xnomap <C-p> <Plug>RemoveOccurrence

set highlightedyank
let g:highlightedyank_highlight_color = "rgba(100, 100, 200, 100)"
let g:highlightedyank_highlight_duration = "350"

set argtextobj
let g:argtextobj_pairs="[:],(:),<:>"

set NERDTree
nnoremap <leader>e :NERDTreeFocus<CR>
nnoremap <leader>E :NERDTreeFind<CR>

" IDEA
set ideastatusicon=gray

" repeating
vnoremap . :normal .<CR>
vnoremap @ :normal! @

" esc
inoremap jk <Esc>`^
inoremap <C-c> <Esc>

" updown -- remap ^K/^J to up/down and force IDE usage. mapping here doesn't like to work
nnoremap <C-k> :action EditorUp<CR>
sethandler <C-k> a:ide

nnoremap <C-j> :action EditorDown<CR>
sethandler <C-j> a:ide

" splits
nnoremap <leader>j <C-w>j
nnoremap <leader>k <C-w>k
nnoremap <leader>l <C-w>l
nnoremap <leader>h <C-w>h
nnoremap <A-l> <C-w>l
nnoremap <A-h> <C-w>h
nnoremap <A-j> <C-w>j
nnoremap <A-k> <C-w>k
nnoremap <A--> :sp<CR>
nnoremap <A-\> :vsp<CR>

vnoremap < <gv
vnoremap > >gv

" closing
nnoremap <C-q> :action CloseContent<CR>

" copy/paste
noremap Y y$

" misc
"nnoremap J mzJ`z
nnoremap J :action EditorJoinLines<CR>
nnoremap U :action $Redo<CR>
nnoremap * *``
nnoremap <leader>xs :source ~/.ideavimrc<CR>

" search
nnoremap <leader>/ :noh<CR>
nnoremap g/ :action FindInPath<CR>
" nnoremap n :action FindNext<CR>
" nnoremap N :action FindPrevious<CR>

" formatting
nnoremap <leader>= :action ReformatCode<CR>
nnoremap <leader>o :action OptimizeImports<CR>
nnoremap <leader>c :action CodeCleanup<CR>
nnoremap <leader>i :action CodeInspection.OnEditor<CR>
nnoremap <leader>s :action SonarLint.AnalyzeFiles<CR>

" project navigation
nnoremap ,o :action ManageRecentProjects<CR>

" file navigation
nnoremap <C-Space> :action SearchEverywhere<CR>
"nnoremap <leader>o :action GotoClass<CR>
nnoremap <space><space> :action FileStructurePopup<CR>
nnoremap <leader>r :action GotoRelated<CR>
"nnoremap <BS> <C-^><CR>
nnoremap <silent> ,, :b#<CR>
nnoremap <C-;> :b#<CR>

" vcs
nnoremap ,ga :action Annotate<CR>
nnoremap ,go :action Github.Open.In.Browser<CR>
vnoremap ,go :action Github.Open.In.Browser<CR>
nnoremap ,pr :action Github.View.Pull.Request<CR>

" paste
map gp gr

" editing / info
nnoremap <Tab> :action ShowIntentionActions<CR>
nnoremap R :action Refactorings.QuickListPopupAction<CR>
nnoremap ge :action GotoNextError<CR>
nnoremap gE :action GotoPreviousError<CR>
" NOTE: gr is ReplaceWithRegister
nnoremap gR :action GotoRelated<CR>
nnoremap gc :action GotoClass<CR>
nnoremap gi :action GotoImplementation<CR>
nnoremap gd :action GotoDeclaration<CR>
nnoremap gs :action GotoSuperMethod<CR>
nnoremap gt :action GotoTest<CR>
nnoremap gU :action FindUsages<CR>

" Remove?
nnoremap <C-]> :action GotoImplementation<cr>
nnoremap <C-[> :action GotoSuperMethod<cr>
"nnoremap <C-i> :action QuickImplementations<cr>
nnoremap <C-p> :action QuickImplementations<cr>
nnoremap <C-S-]> :action FindUsages<CR>
nnoremap <leader>u :action HighlightUsagesInFile<cr>
nnoremap ,t :action ActivateTerminalToolWindow<CR>

" run / build / test
nnoremap <C-r> :action ChooseRunConfiguration<CR>
nnoremap ,rr :action RunClass<CR>
nnoremap ,rd :action DebugClass<CR>
nnoremap ,rf :action RerunFailedTests<CR>

nnoremap <C-Down> :action MoveStatementDown<CR>
nnoremap <C-Up> :action MoveStatementUp<CR>
"nnoremap <C-/> :action CommentByLineComment<CR>
nmap <C-/> <Plug>CommentaryLine
nnoremap <C-Right> :action NextTab<CR>
nnoremap <C-Left> :action PreviousTab<CR>

" unimpaired mappings
nnoremap [<space> O<esc>j
nnoremap ]<space> o<esc>k
nnoremap [q :action PreviousOccurence<cr>
nnoremap ]q :action NextOccurence<cr>
nnoremap [m :action MethodUp<cr>
nnoremap ]m :action MethodDown<cr>
nnoremap ]c :action VcsShowNextChangeMarker<cr>
nnoremap [c :action VcsShowPrevChangeMarker<cr>
nnoremap ]q :action GotoNextError<CR>
nnoremap [q :action GotoPreviousError<CR>ck)

" toggles
nnoremap coc :action ChangeColorScheme<CR>
nnoremap cod :action ToggleLineBreakpoint<CR>
nnoremap coh :action HideAllWindows<CR>
nnoremap col :action EditorToggleShowWhitespaces<CR>
nnoremap con :set number!<CR>
nnoremap cop :action PinActiveTabToggle<CR>
nnoremap cor :set relativenumber!<CR>
nnoremap cos :action EditorToggleShowWhitespaces<CR>
nnoremap cow :action EditorToggleUseSoftWraps<CR>ck)
nnoremap com :action ToggleBookmark<CR>


" tool windows
nnoremap ,vv :action ActivateVersionControlToolWindow<CR>
nnoremap ,vf :action ActivateFindBugs-IDEAToolWindow<CR>
nnoremap ,vs :action ActivateSonarLintToolWindow<CR>

" scoped mappings
" inoremap <C-X>= :normal action InsertRubyInjection<CR>
inoremap <C-X>= ${}<Esc>i

" sandbox
"nnoremap <C-o> :action Back<CR>
"nnoremap <C-i> :action Forward<CR>

"nnoremap <BS> :action Back<CR>
"nnoremap <C-BS> :action Forward<CR>
nnoremap gb :action Back<CR>
nnoremap gf :action Forward<CR>
