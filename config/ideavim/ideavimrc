let mapleader=" "

" options
set clipboard+=unnamed
set hlsearch
set ignorecase
set incsearch
set mps+=<:>
set number
" set relativenumber
set scrolloff=3
set showmode
set sidescroll=1
set sidescrolloff=3
set smartcase
set undolevels=100
set viminfo='10,/10,h,\"10,:10
set wrapscan

" emulated support
" https://github.com/JetBrains/ideavim/wiki/Emulated-plugins
set surround
set exchange
set commentary
set ideamarks
set ReplaceWithRegister

set vim-paragraph-motion
set textobj-indent
set matchit

set multiple-cursors
" change keybinds for multiple-cursors
" NOTE: need to change keyboard to unicode hex input!
" SEE: https://stackoverflow.com/a/65430514
" g<M-n|p|x> - next, prev, skip
"nnomap <M-n> <Plug>NextWholeOccurrence
"xnomap <M-n> <Plug>NextWholeOccurrence
"nnomap g<C-n> <Plug>NextOccurrence
"xnomap g<C-n> <Plug>NextOccurrence
"nnomap <C-x> <Plug>SkipOccurrence
"xnomap <C-x> <Plug>SkipOccurrence
"nnomap <C-p> <Plug>RemoveOccurrence
"xnomap <C-p> <Plug>RemoveOccurrence

set highlightedyank
let g:highlightedyank_highlight_color = "rgba(100, 100, 200, 100)"
let g:highlightedyank_highlight_duration = "350"

set argtextobj
let g:argtextobj_pairs="[:],(:),<:>"

set NERDTree
nnoremap <leader>e :NERDTreeFocus<CR>
nnoremap <leader>E :NERDTreeFind<CR>

" IDEA
set ideastatusicon=gray

" repeating
vnoremap . :normal .<CR>
vnoremap @ :normal! @

" esc
inoremap jk <Esc>`^
inoremap <C-c> <Esc>

" updown -- remap ^K/^J to up/down and force IDE usage. mapping here doesn't like to work
nmap <C-k> <Action>(EditorUp)
sethandler <C-k> a:ide

nmap <C-j> <Action>(EditorDown)
sethandler <C-j> a:ide

" splits
nnoremap <leader>j <C-w>j
nnoremap <leader>k <C-w>k
nnoremap <leader>l <C-w>l
nnoremap <leader>h <C-w>h
nnoremap <A-l> <C-w>l
nnoremap <A-h> <C-w>h
nnoremap <A-j> <C-w>j
nnoremap <A-k> <C-w>k
nnoremap <A--> :sp<CR>
nnoremap <A-\> :vsp<CR>

vnoremap < <gv
vnoremap > >gv

" closing
nmap <C-q> <Action>(CloseContent)

" copy/paste
noremap Y y$

" misc
"nnoremap J mzJ`z
nmap J <Action>(EditorJoinLines)
nmap U <Action>($Redo)
nnoremap * *``
nnoremap <leader>xs :source ~/.ideavimrc<CR>
nmap ,yp <Action>(CopyContentRootPath)

" search
nnoremap <leader>/ :noh<CR>
nmap g/ <Action>(FindInPath)<CR>
" nnoremap n :action FindNext<CR>
" nnoremap N :action FindPrevious<CR>

" formatting
nmap <leader>= <Action>(ReformatCode)
nmap <leader>o <Action>(OptimizeImports)
nmap <leader>c <Action>(CodeCleanup)
nmap <leader>i <Action>(CodeInspection.OnEditor)
nmap <leader>s <Action>(SonarLint.AnalyzeFiles)

" project navigation
nmap ,o <Action>(ManageRecentProjects)<CR>

" file navigation
nnoremap <C-Space> :action SearchEverywhere<CR>
"nnoremap <leader>o :action GotoClass<CR>
nnoremap <space><space> :action FileStructurePopup<CR>
nmap <leader>r <Action>(GotoRelated)<CR>
"nnoremap <BS> <C-^><CR>
nnoremap <silent> ,, :b#<CR>
nnoremap <C-;> :b#<CR>
nmap <leader>t <Action>(ActivateTODOToolWindow)<CR>

" vcs
nmap <leader>g <Action>(Vcs.Operations.Popup)
nmap ,ga <Action>(Annotate)
nmap ,gh <Action>(Vcs.ShowHistoryForBlock)
vmap ,gh <Action>(Vcs.ShowHistoryForBlock)

nmap ,go <Action>(uk.co.ben_gibson.git.link.ui.actions.menu.BrowserAction)
vmap ,go <Action>(uk.co.ben_gibson.git.link.ui.actions.menu.BrowserAction)
nmap ,gc <Action>(uk.co.ben_gibson.git.link.ui.actions.menu.CopyAction)
vmap ,gc <Action>(uk.co.ben_gibson.git.link.ui.actions.menu.CopyAction)
nmap ,gm <Action>(uk.co.ben_gibson.git.link.ui.actions.menu.MarkdownAction)
vmap ,gm <Action>(uk.co.ben_gibson.git.link.ui.actions.menu.MarkdownAction)

nmap ,pr <Action>(Github.View.Pull.Request)

" paste
map gp gr

" editing / info
nnoremap <Tab> :action ShowIntentionActions<CR>
nnoremap R :action Refactorings.QuickListPopupAction<CR>
nnoremap ga :action AIIntentionsActionGroup<CR>

nmap ge <Action>(GotoNextError)
nmap gE <Action>(GotoPreviousError)
" NOTE: gr is ReplaceWithRegister
nmap gR <Action>(GotoRelated)
"nmap gc <Action>(GotoClass)
nmap gi <Action>(GotoImplementation)
nmap gd <Action>(GotoDeclaration)
nmap gs <Action>(GotoSuperMethod)
nmap gt <Action>(GotoTest)
nmap ,u <Action>(FindUsages)

" Remove?
nmap <C-]> <Action>(GotoImplementation)
nmap <C-[> <Action>(GotoSuperMethod)
"nnoremap <C-i> :action QuickImplementations<cr>
nmap <C-p> <Action>(QuickImplementations)
nmap <C-S-]> <Action>(FindUsages)
nmap <leader>u <Action>(HighlightUsagesInFile)
nmap ,t <Action>(ActivateTerminalToolWindow)

" run / build / test
nmap <C-r> <Action>(ChooseRunConfiguration)
nmap ,rr <Action>(RunClass)
nmap ,rd <Action>(DebugClass)
nmap ,rf <Action>(RerunFailedTests)

nnoremap <C-Down> :action MoveStatementDown
nnoremap <C-Up> :action MoveStatementUp
"nmap <C-/> <Action>(CommentByLineComment)
nmap <C-/> <Plug>CommentaryLine
nmap <C-Right> <Action>(NextTab)
nmap <C-Left> <Action>(PreviousTab)

" unimpaired mappings
nnoremap [<space> O<esc>j
nnoremap ]<space> o<esc>k
nmap [q <Action>(PreviousOccurence)
<Action>(]q )<Action>(NextOccurence)
nmap [m <Action>(MethodUp)
nmap ]m <Action>(MethodDown)
nmap ]c <Action>(VcsShowNextChangeMarker)
nmap [c <Action>(VcsShowPrevChangeMarker)
nmap ]q <Action>(GotoNextError)
nmap [q <Action>(GotoPreviousError)

" toggles
nnoremap con :set number!<CR>
nnoremap cor :set relativenumber!<CR>
nmap coc <Action>(ChangeColorScheme)
nmap cod <Action>(ToggleLineBreakpoint)
nmap coh <Action>(HideAllWindows)
nmap col <Action>(EditorToggleShowWhitespaces)
nmap cop <Action>(PinActiveTabToggle)
nmap cos <Action>(EditorGutterToggleGlobalStickyLines)
nmap cow <Action>(EditorToggleUseSoftWraps)
nmap com <Action>(ToggleBookmark)
nmap cog <Action>(Github.Pull.Request.Review.In.Editor.Toggle)

" claude
nmap ,cc <Action>(com.anthropic.code.plugin.actions.SendToClaudeAction)
vmap ,cc <Action>(com.anthropic.code.plugin.actions.SendToClaudeAction)
nmap ,co <Action>(com.anthropic.code.plugin.actions.OpenClaudeInTerminalAction)

" tool windows
nmap ,vv <Action>(ActivateVersionControlToolWindow)
nmap ,vf <Action>(ActivateFindBugs-IDEAToolWindow)
nmap ,vs <Action>(ActivateSonarLintToolWindow)

" scoped mappings
" inoremap <C-X>= :normal action InsertRubyInjection<CR>
inoremap <C-X>= ${}<Esc>i

" sandbox
"nnoremap <C-o> :action Back<CR>
"nnoremap <C-i> :action Forward<CR>

"nnoremap <BS> :action Back<CR>
"nnoremap <C-BS> :action Forward<CR>
nmap gb <Action>(Back)<CR>
nmap gf <Action>(Forward)<CR>
